{
  "hooks": {
    "UserPromptSubmit": [
      {
        "type": "command",
        "command": "if ! lsof -ti:3001 > /dev/null || ! lsof -ti:3000 > /dev/null; then echo '⚠️  Warning: Backend (3001) or Frontend (3000) not running. Start servers: npm run dev:full' >&2; fi"
      },
      {
        "type": "command",
        "command": "if [ ! -f $PWD/.env ]; then echo '⚠️  Warning: .env file not found. Copy .env.example to .env and add ANTHROPIC_API_KEY' >&2; elif ! grep -q '^ANTHROPIC_API_KEY=sk-' $PWD/.env 2>/dev/null; then echo '⚠️  Warning: ANTHROPIC_API_KEY not set in .env or invalid format' >&2; fi"
      }
    ],
    "PreToolUse": [
      {
        "matcher": "^Bash$",
        "type": "command",
        "command": "if echo \"$TOOL_INPUT\" | jq -r '.command // empty' | grep -qE 'git (add|commit)'; then FILES=$(echo \"$TOOL_INPUT\" | jq -r '.command' | grep -oE '[^[:space:]]+\\.(env|key|pem|json|yml)' || true); if echo \"$FILES\" | grep -qE '\\.(env|key|pem)'; then echo '{\"block\": true, \"message\": \"🚫 Blocked: Attempting to commit sensitive file: '$FILES'. Remove from git staging.\"}'; exit 0; fi; fi"
      },
      {
        "matcher": "^Bash$",
        "type": "command",
        "command": "if echo \"$TOOL_INPUT\" | jq -r '.command // empty' | grep -qE 'npm run (dev|server|dev:full)'; then if lsof -ti:3000 > /dev/null 2>&1 || lsof -ti:3001 > /dev/null 2>&1; then echo '{\"block\": false, \"message\": \"⚠️  Warning: Port 3000 or 3001 already in use. Kill processes: lsof -ti:3000,3001 | xargs kill -9\"}'; fi; fi"
      }
    ],
    "PostToolUse": [
      {
        "matcher": "^(Write|Edit)$",
        "type": "command",
        "command": "FILE_PATH=$(echo \"$TOOL_INPUT\" | jq -r '.file_path // empty'); if echo \"$FILE_PATH\" | grep -qE 'src/(services|types|contexts)/.*\\.(ts|tsx)$' && [ -f \"$FILE_PATH\" ]; then echo '🔍 Running TypeScript type check (critical path)...'; cd $PWD && npx tsc --noEmit 2>&1 | head -30 || echo '✓ No type errors'; fi"
      },
      {
        "matcher": "^(Write|Edit)$",
        "type": "command",
        "command": "FILE_PATH=$(echo \"$TOOL_INPUT\" | jq -r '.file_path // empty'); if echo \"$FILE_PATH\" | grep -qE '\\.test\\.(ts|tsx)$' && [ -f \"$FILE_PATH\" ]; then echo '🧪 Running related tests...'; cd $PWD && npm run test:run \"$FILE_PATH\" 2>&1 | tail -20 || echo '✓ Tests passed'; fi"
      },
      {
        "matcher": "^(Write|Edit)$",
        "type": "command",
        "command": "FILE_PATH=$(echo \"$TOOL_INPUT\" | jq -r '.file_path // empty'); if echo \"$FILE_PATH\" | grep -qE '\\.(ts|tsx|js|jsx|css|json)$' && [ -f \"$FILE_PATH\" ]; then cd $PWD && npx prettier --write \"$FILE_PATH\" 2>/dev/null && echo '✨ Auto-formatted file' || true; fi"
      },
      {
        "matcher": "^(Write|Edit)$",
        "type": "command",
        "command": "FILE_PATH=$(echo \"$TOOL_INPUT\" | jq -r '.file_path // empty'); if echo \"$FILE_PATH\" | grep -qE '\\.(ts|tsx)$' && [ -f \"$FILE_PATH\" ]; then cd $PWD && npx eslint \"$FILE_PATH\" --max-warnings 0 2>&1 | head -20 || true; fi"
      },
      {
        "matcher": "^(Write|Edit)$",
        "type": "command",
        "command": "FILE_PATH=$(echo \"$TOOL_INPUT\" | jq -r '.file_path // empty'); if echo \"$FILE_PATH\" | grep -qE 'src/hooks/use.*\\.ts$' && [ -f \"$FILE_PATH\" ]; then VIOLATIONS=$(grep -E 'use[A-Z][a-zA-Z]*\\(' \"$FILE_PATH\" | grep -v '^//' | grep -v 'useState\\|useEffect\\|useContext\\|useMemo\\|useCallback\\|useRef\\|useReducer' | head -3); if [ -n \"$VIOLATIONS\" ]; then echo '❌ Hook isolation violated: Custom hooks should not call other custom hooks directly. Use AppContext composition instead.'; fi; fi"
      },
      {
        "matcher": "^(Write|Edit)$",
        "type": "command",
        "command": "FILE_PATH=$(echo \"$TOOL_INPUT\" | jq -r '.file_path // empty'); if echo \"$FILE_PATH\" | grep -qE 'src/(services|types|hooks)/.*\\.(ts|tsx)$' && [ -f \"$FILE_PATH\" ]; then echo '🔍 Checking for breaking changes...'; git diff HEAD \"$FILE_PATH\" 2>/dev/null | grep -E '^[-+].*(export|interface|type)' | head -10 || echo '✓ No export signature changes'; fi"
      },
      {
        "matcher": "^Write$",
        "type": "command",
        "command": "FILE_PATH=$(echo \"$TOOL_INPUT\" | jq -r '.file_path // empty'); if echo \"$FILE_PATH\" | grep -qE 'src/(components|features|hooks|services)/.*\\.(ts|tsx)$' && ! echo \"$FILE_PATH\" | grep -q '\\.test\\.'; then if echo \"$FILE_PATH\" | grep -qE '\\.tsx$'; then EXT='tsx'; else EXT='ts'; fi; TEST_FILE=\"${FILE_PATH%.*}.test.$EXT\"; if [ ! -f \"$TEST_FILE\" ]; then echo '⚠️  WARNING: New file created without test. Create '$TEST_FILE; fi; fi"
      },
      {
        "matcher": "^(Write|Edit)$",
        "type": "command",
        "command": "FILE_PATH=$(echo \"$TOOL_INPUT\" | jq -r '.file_path // empty'); if echo \"$FILE_PATH\" | grep -qE 'src/(services|types|contexts|components/layout|App\\.tsx)/.*\\.(ts|tsx)$' && [ -f \"$FILE_PATH\" ]; then DOCS=''; if echo \"$FILE_PATH\" | grep -q 'services/api.ts'; then DOCS='CLAUDE.md (API Service Layer section)'; elif echo \"$FILE_PATH\" | grep -q 'types/index.ts'; then DOCS='CLAUDE.md (Type System section)'; elif echo \"$FILE_PATH\" | grep -q 'contexts/AppContext.tsx'; then DOCS='CLAUDE.md (State Management section), docs/architecture/state-management.md'; elif echo \"$FILE_PATH\" | grep -q 'App.tsx'; then DOCS='CLAUDE.md (UI Structure section)'; elif echo \"$FILE_PATH\" | grep -q 'components/layout'; then DOCS='CLAUDE.md (Architecture section)'; fi; if [ -n \"$DOCS\" ]; then echo '📚 AUTO-DOC ALERT: Core file changed. Update documentation: '$DOCS; fi; fi"
      },
      {
        "matcher": "^(Write|Edit)$",
        "type": "command",
        "command": "FILE_PATH=$(echo \"$TOOL_INPUT\" | jq -r '.file_path // empty'); if echo \"$FILE_PATH\" | grep -qE '\\.(ts|tsx|js|jsx)$' && ! echo \"$FILE_PATH\" | grep -qE '(\\.test\\.(ts|tsx)|/test/)' && [ -f \"$FILE_PATH\" ]; then if grep -qE '(ANTHROPIC_API_KEY|sk-ant-[a-zA-Z0-9_-]{95}|sk-[a-zA-Z0-9]{40,}|ghp_[a-zA-Z0-9]{36})' \"$FILE_PATH\" 2>/dev/null; then echo '⚠️  WARNING: Potential API key or secret detected in file. Review before commit.'; fi; fi"
      }
    ],
    "Stop": [
      {
        "type": "command",
        "command": "echo '📊 Session Complete - Project Status:' && cd $PWD && git status --short 2>/dev/null | head -15 || echo 'No git changes'"
      },
      {
        "type": "command",
        "command": "cd $PWD && CHANGES=$(git diff --stat 2>/dev/null | tail -1); UNTRACKED=$(git ls-files --others --exclude-standard | wc -l | tr -d ' '); if [ -n \"$CHANGES\" ] || [ \"$UNTRACKED\" -gt 0 ]; then echo '\n🎯 COMMIT HELPER:'; echo '  Changes: '$CHANGES; echo '  Untracked files: '$UNTRACKED; echo '\n  Quick commit:'; echo '    git add -A'; echo '    git commit -m \"your descriptive message\"'; echo '    git push'; fi"
      },
      {
        "type": "command",
        "command": "echo '\n📋 WORKFLOW COMPLIANCE CHECK:\n  ✓ TodoWrite for multi-step tasks?\n  ✓ Tests/TypeScript/ESLint after changes?\n  ✓ Documentation updated?\n'"
      }
    ]
  }
}
